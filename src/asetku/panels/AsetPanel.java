/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package asetku.panels;

import asetku.databases.ConnectionManager;
import asetku.databases.DatabaseServices;
import asetku.databases.UserSession;
import asetku.models.Branch;
import asetku.models.Divisi;
import asetku.utils.Utilities;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dhafa
 */
public class AsetPanel extends javax.swing.JPanel {
    Connection connection = ConnectionManager.getInstance().getConnection();
    DatabaseServices services;
    String branchId = "";
    Divisi[] divisions;
    /**
     * Creates new form AsetPanel
     */
    public AsetPanel() {
        initComponents();
        restrictAccess();
        
        // Start connection
        services = new DatabaseServices(connection);
        
        initAssetsTable("");
         
        searchField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                initAssetsTable(searchField.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                initAssetsTable(searchField.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                initAssetsTable(searchField.getText());
            }
        });
    }
    
    private void restrictAccess() {
        if(UserSession.getCurrentUser() == null) {
            return;
        }
        String roleId = UserSession.getCurrentUser().getRoleId() != null ? UserSession.getCurrentUser().getRoleId() : "";
        
        if(roleId.equals("2")) {
            addAsetButton.setEnabled(false);
        }
    }
    
    private void initAssetsTable(String search) {
        if(UserSession.getCurrentUser() == null) {
            return;
        }
        Object[] header = new Object[]{"No.", "Kode Aset", "Nama Aset", "Harga Aset", "Divisi", "Status"};
        DefaultTableModel tableModel = new DefaultTableModel(null, header) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        asetTable.setModel(tableModel);
        
        String query = "SELECT * FROM aset\n"
                + "JOIN divisi ON divisi.id=aset.divisi_id\n"
                + "JOIN cabang ON divisi.cabang_id=cabang.id\n"
                + "WHERE cabang.id=?\n"
                + "AND aset.nama_aset LIKE ?";
        
        try {
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, UserSession.getCurrentUser().getBranchId());
            stmt.setString(2, '%' + search + '%');
            
            ResultSet result = stmt.executeQuery();
            int i = 1;
            while(result.next()) {
                
                String a = result.getString("kode_aset");
                String b = result.getString("nama_aset");
                String c = Utilities.getFormatCurrency().format(result.getDouble("harga_aset"));
                String d = result.getString("divisi.nama");
                String e = "";
                if("0".equals(result.getString("verify"))) {
                    e = "Belum diverifikasi";
                } else {
                    e = "Terverifikasi";
                }
                
                Object[] row = new Object[]{i, a, b, c, d, e};
                tableModel.addRow(row);
                i++;
            }
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        asetTable = new javax.swing.JTable();
        mutasiButton = new javax.swing.JButton();
        addAsetButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        approveButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();

        asetTable.setModel(new javax.swing.table.DefaultTableModel(
            null,
            new String [] {
                "Title 1"
            }
        ));
        asetTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        asetTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                asetTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(asetTable);

        mutasiButton.setText("Mutasi");
        mutasiButton.setEnabled(false);
        mutasiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mutasiButtonActionPerformed(evt);
            }
        });

        addAsetButton.setText("Tambah Data");
        addAsetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAsetButtonActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "20", "30", "40", "50" }));

        jLabel1.setText("Show");

        jLabel2.setText("Entries");

        approveButton.setText("Setujui");
        approveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Hapus");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(approveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(mutasiButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addAsetButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addAsetButton)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mutasiButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(approveButton)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addAsetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAsetButtonActionPerformed
        
    }//GEN-LAST:event_addAsetButtonActionPerformed

    private void approveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveButtonActionPerformed

        JPasswordField passwordField = new JPasswordField();
        JComponent[] inputs = new JComponent[]{
            new JLabel("Kata sandi"),
            passwordField
        };
        int result = JOptionPane.showConfirmDialog(this, inputs, "Masukkan kata sandi untuk melanjutkan", JOptionPane.OK_CANCEL_OPTION);
        
        if(result == JOptionPane.OK_OPTION) {
            
            // Verify user
            String query = "SELECT * FROM users\n"
                    + "WHERE users.nip=?";
            try {
                PreparedStatement stmt = connection.prepareStatement(query);
                stmt.setString(1, UserSession.getCurrentUser().getNip());
                
                ResultSet resultSet = stmt.executeQuery();
                
                if(resultSet.next()) {
                    if(!resultSet.getString("password").equals(passwordField.getText())) {
                        JOptionPane.showMessageDialog(this, "Password salah");
                        return;
                    }
                }
            } catch (SQLException e) {
                System.err.println(e.getMessage());
            }
            
            // Update assets verify
            int selectedIndex = asetTable.getSelectedRow();
            Object selectedValue = asetTable.getValueAt(selectedIndex, 1);
            query = "UPDATE aset SET verify=1\n"
                    + "WHERE kode_aset=?";
            
            try {
                PreparedStatement stmt = connection.prepareStatement(query);
                stmt.setObject(1, selectedValue);
                
                stmt.execute();
                JOptionPane.showMessageDialog(this, "Berhasil!");
                initAssetsTable("");
            } catch (SQLException e) {
                System.err.println(e.getMessage());
            }
            
        }
    }//GEN-LAST:event_approveButtonActionPerformed

    private void mutasiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mutasiButtonActionPerformed
        int selectedRow = asetTable.getSelectedRow();
        JComboBox<Branch> comboCabang = new JComboBox<>(services.getBranches());
        branchId = ((Branch) comboCabang.getSelectedItem()).getId();
        divisions = services.getDivisions(branchId);
        JComboBox<Divisi> comboDivisi = new JComboBox<>(divisions);
        
        comboCabang.addItemListener((ItemEvent e) -> {
            if(e.getStateChange() == ItemEvent.SELECTED) {
                branchId = ((Branch) e.getItem()).getId();
                divisions = services.getDivisions(branchId);
                DefaultComboBoxModel<Divisi> defaultComboBoxModel = new DefaultComboBoxModel<>(divisions);
                comboDivisi.setModel(defaultComboBoxModel);
                System.out.println("Branch ID : " + branchId);
                for (Divisi division : divisions) {
                    System.out.println("Divisi ID : " + division.getId());
                }
            }
        });
        
        comboDivisi.addItemListener((e) -> {
            if(e.getStateChange() == ItemEvent.SELECTED) {
                Divisi divisi = (Divisi) e.getItem();
                System.out.println(divisi.getId());
            }
        });
        
        JComponent[] inputs = new JComponent[]{
            comboCabang,
            comboDivisi
        };
        
        int result = JOptionPane.showConfirmDialog(this, inputs, "Mutasi", JOptionPane.PLAIN_MESSAGE);
        
        if(result == JOptionPane.OK_OPTION) {
            String selectQuery = "SELECT * FROM aset\n"
                    + "WHERE kode_aset=?";
            String updateQuery = "UPDATE aset SET divisi_id=?\n"
                    + "WHERE kode_aset=?";
            
            String insertQuery = "INSERT INTO history_aset(aset_id, divisi_lama_id, divisi_baru_id, created_at)\n"
                    + "VALUES (?, ?, ?, ?)";
            
            try {
                PreparedStatement selectStmt = connection.prepareStatement(selectQuery);
                selectStmt.setString(1, asetTable.getValueAt(selectedRow, 1).toString());
                ResultSet resultSet = selectStmt.executeQuery();
                if(!resultSet.next()) {
                    throw new SQLException();
                }
                
                PreparedStatement updateStmt = connection.prepareStatement(updateQuery);
                updateStmt.setString(1, ((Divisi) comboDivisi.getSelectedItem()).getId());
                updateStmt.setString(2, asetTable.getValueAt(selectedRow, 1).toString());
                updateStmt.execute();
                
                PreparedStatement insertStmt = connection.prepareStatement(insertQuery);
                insertStmt.setString(1, resultSet.getString("id"));
                insertStmt.setString(2, resultSet.getString("divisi_id"));
                insertStmt.setString(3, ((Divisi) comboDivisi.getSelectedItem()).getId());
                insertStmt.setTimestamp(4, new java.sql.Timestamp(new java.util.Date().getTime()));
                insertStmt.execute();
                
                JOptionPane.showMessageDialog(this, "Berhasil");
                
                initAssetsTable("");
            } catch (SQLException e) {
                System.err.println(e.getErrorCode());
                System.err.println(e.getMessage());
            } catch (HeadlessException ex) {
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_mutasiButtonActionPerformed

    private void asetTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_asetTableMouseClicked
       int selectedIndex = asetTable.getSelectedRow();
       
       if(asetTable.getValueAt(selectedIndex, 5).equals("Belum diverifikasi")) {
           approveButton.setEnabled(true);
       } else {
           approveButton.setEnabled(false);
       }
       
       if(asetTable.getValueAt(selectedIndex, 5).equals("Terverifikasi")) {
           mutasiButton.setEnabled(true);
       } else {
           mutasiButton.setEnabled(false);
       }
    }//GEN-LAST:event_asetTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAsetButton;
    private javax.swing.JButton approveButton;
    private javax.swing.JTable asetTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mutasiButton;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
